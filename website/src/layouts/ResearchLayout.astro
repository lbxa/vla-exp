---
import "../styles/global.css";
import Nav from '../components/Nav.astro';

export interface Props {
  title?: string;
  description?: string;
}

const { title = "Research Paper", description = "Academic research presentation" } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- KaTeX CSS for math rendering -->
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css" as="style" onload="this.onload=null;this.rel='stylesheet';" />
    <noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css" /></noscript>
  </head>
  <body class="bg-white leading-relaxed text-gray-900">
    <Nav />

    <!-- Main content -->
    <main class="pt-20">
      <slot />
    </main>

    <!-- Footer -->
    <footer class="mt-16 border-t border-gray-200 bg-gray-50">
      <div class="mx-auto max-w-4xl px-lg py-xl text-center text-sm text-gray-600">
        <p>Â© 2024 - Built with <a href="https://astro.build" class="text-blue-600 hover:underline">Astro</a></p>
      </div>
    </footer>

    <script>

      // Heading anchor functionality
      function generateHeadingIds() {
        const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
        
        headings.forEach(heading => {
          if (!heading.id) {
            const text = heading.textContent || '';
            const id = text
              .toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '');
            
            if (id) {
              heading.id = id;
            }
          }
        });
      }

      function setupHeadingAnchors() {
        const headings = document.querySelectorAll<HTMLElement>('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
        
        headings.forEach(heading => {
          heading.addEventListener('click', async (e: MouseEvent) => {
            // Only trigger if we're hovering (icon is visible) or Meta/Ctrl key is pressed
            const afterStyles = window.getComputedStyle(heading, '::after');
            const isHovering = afterStyles.opacity !== '0';
            
            if (isHovering || e.metaKey || e.ctrlKey) {
              e.preventDefault();
              
              const headingId = heading.id;
              
              if (headingId) {
                const url = `${window.location.origin}${window.location.pathname}#${headingId}`;
                
                // Update URL
                history.pushState(null, '', `#${headingId}`);
                
                // Copy to clipboard
                try {
                  await navigator.clipboard.writeText(url);
                  
                  // Visual feedback - highlight P in baby blue
                  heading.style.setProperty('--anchor-color', '#60A5FA');
                  
                  setTimeout(() => {
                    heading.style.removeProperty('--anchor-content');
                    heading.style.removeProperty('--anchor-color');
                  }, 1000);
                } catch (err) {
                  console.warn('Failed to copy to clipboard:', err);
                }
              }
            }
          });
        });
      }

      // Initialize heading functionality
      document.addEventListener('DOMContentLoaded', () => {
        generateHeadingIds();
        setupHeadingAnchors();
      });
    </script>
  </body>
</html>