---
export interface Props {
  src: string;
  caption?: string;
  autoplay?: boolean;
  loop?: boolean;
  muted?: boolean;
  controls?: boolean;
  width?: string;
  height?: string;
  class?: string;
  poster?: string;
}

const { 
  src, 
  caption, 
  autoplay = false,
  loop = false,
  muted = true,
  controls = true,
  width = "100%", 
  height = "auto",
  class: className = "",
  poster
} = Astro.props;

// Generate a unique ID for this video instance
const videoId = `video-${Math.random().toString(36).substr(2, 9)}`;
---

<figure class={`my-xl ${className}`}>
  <div class="rounded-lg border border-gray-200 bg-gray-50 p-md">
    <div class="relative">
      <video 
        id={videoId}
        src={src}
        width={width}
        height={height}
        autoplay={autoplay}
        loop={loop}
        muted={muted}
        controls={controls}
        poster={poster}
        class="h-auto w-full max-w-full rounded shadow-sm"
        preload="metadata"
      >
        Your browser does not support the video tag.
      </video>
      
      <!-- Custom play button overlay for autoplay=false videos -->
      {!autoplay && (
        <button 
          class="play-button absolute inset-0 flex items-center justify-center rounded bg-black bg-opacity-30 opacity-0 transition-opacity hover:opacity-100"
          aria-label="Play video"
        >
          <svg class="size-16 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
          </svg>
        </button>
      )}
    </div>
  </div>
  {caption && (
    <figcaption class="mt-3 text-center text-sm italic text-gray-600">
      {caption}
    </figcaption>
  )}
</figure>

<style>
  figure {
    margin-left: auto;
    margin-right: auto;
  }
  
  video {
    /* No hover effects */
  }
  
  /* Hide play button when video is playing */
  video:not([paused]) + .play-button {
    opacity: 0 !important;
    pointer-events: none;
  }
  
  /* Responsive video container */
  @media (max-width: 768px) {
    figure {
      margin-left: auto;
      margin-right: auto;
    }
    
    .bg-gray-50 {
      border-radius: 0;
      border-left: none;
      border-right: none;
    }
  }
</style>

<script define:vars={{ videoId }}>
  // Add play button functionality
  document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById(videoId);
    const playButton = video?.nextElementSibling;
    
    if (playButton?.classList.contains('play-button')) {
      playButton.addEventListener('click', () => {
        video.play();
      });
    }
    
    // Hide/show play button based on video state
    if (video) {
      video.addEventListener('play', () => {
        if (playButton) playButton.style.opacity = '0';
      });
      
      video.addEventListener('pause', () => {
        if (playButton) playButton.style.opacity = '';
      });
      
      video.addEventListener('ended', () => {
        if (playButton) playButton.style.opacity = '';
      });
    }
  });
</script>